#import "lib/gost.typ": init
#import "@preview/zebraw:0.5.5": *
#show: init
#show: zebraw

= Цель работы

Изучение методов и получение практических
навыков анализа сложности алгоритмов.


= Выполнение индивидуального задания

Используя память, пропорциональную $n$, хранить массив целых чисел
$A$, содержащий $n$ элементов.
Элементы массива $A$ могут принимать случайные значения от
$-((n div 2) - 1)$ до $(n div 2)$. То есть, если в массиве хранится 10 элементов, то
эти элементы должны быть в диапазоне от -4 до 5.
Разработать алгоритм, который осуществляет заполнение массива $A$
случайными значениями, и по выбору пользователя выполняет одну из двух
функций. Состав выполняемых функций и требования к теоретической
временной сложности этих функций определяется вариантом задания.

Вариант 5.
1. Подсчитать сумму всех элементов, имеющих положительные значения. $T(n)$, не более $O(n)$.
2. Подсчитать количество элементов с нечетными значениями. $T(n)$, не более $O(1)$.

= Листинг программы

#raw(read("../src/main.cpp"), lang: "cpp", block: true)

= Скриншоты работы программы

#image("images/001.png")

#image("images/002.png")

= Расчет теоретических пространственной и временной сложностей алгоритма

Разработанный алгоритм использует следующие данные:
- 2 целочисленные переменные;
- один массив размерностью n;
- одна переменная для хранения одного символа.

Расчёт пространственной сложности:

$
    v = 2 dot C_"int" + n dot C_"int" + C_"char"  
   
$
где:
- $C_"int"$ -- константа характеризующая объем памяти отводимой на переменную целого числа;
- $C_"char"$ -- константа характеризующая объем памяти отводимой на переменную для хранения одного символа.

Расчёт теоретической пространственной сложности:
$
 V(n) = O(v) = O(max(O(2 dot C_"int") + O(n dot C_"int") + O(C_"char") + O(C_"int"))) = \ = O(max(O(1) + O(n) + O(1)) = O(n)
$

Теоретическая пространственная сложность алгоритма составляет: $O(n)$.

Расчёт временной сложности:
$
    t_"sum" = K_7 + n dot K_10 + K_12  \
    t_"odds" = K_16 + n dot K_19 + K_21 
$
где:
$K_i$ -- константа, характеризующая время выполнения операций, на строке $i$;
$t_"sum"$ -- временная сложность алгоритма для подсчёта суммы всех элементов, имеющих положительные значения;
$t_"odds"$ -- временная сложность алгоритма подсчёта количества элементов с нечетными значениями.

Расчёт теоретической временной сложности:

$
    T_"sum" = O(t_"sum") = O(max(O(K_7) + O(n dot K_10) + O(K_12) )) = \ = O(max(O(1) + O(n) + O(1))) = O(n) \
    T_"odds" =  O(t_"odds") = O(max(O(K_16) + O(n dot K_19) + O(K_21))) = \ = O(max(O(1) + O(n) + O(1))) = O(n)
$

На основе этих расчётов можно сделать вывод, что алгоритм подсчёта нечётных элементов имеет минимально возможную теоретическую сложность $O(n)$. Достичь лучшего показателя невозможно, поскольку для решения задачи требуется проверить каждый элемент массива.

Для алгоритма для подсчёта суммы всех элементов, имеющих положительные значения была достигнута необходимая теоретическая сложность $O(n)$.


= Выводы

В ходе выполнения данной лабораторной работы были изучены методы и приобретены практические навыки по анализу пространственной и временной сложности алгоритмов.
